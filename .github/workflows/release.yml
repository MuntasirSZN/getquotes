name: 🚀 Release Builds and Publish

# Trigger on version tags (e.g., v1.0.0)
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

# Jobs for building, releasing, and publishing
jobs:
  build:
    name: 💠 Build for ${{ matrix.target }}
    runs-on: ${{ matrix.target == 'x86_64-apple-darwin' && 'macos-latest' || matrix.target == 'x86_64-pc-windows-gnu' && 'windows-latest' || 'ubuntu-latest' }}
    strategy:
      matrix:
        target:
           - x86_64-unknown-linux-gnu
           - x86_64-apple-darwin
           - x86_64-pc-windows-gnu
           - aarch64-linux-android

    steps:
      # Checkout the repository
      - name: 🔍 Checkout code
        uses: actions/checkout@v3
        
      - name: 🛠️ Install SQLite dependencies (Linux only)
        if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'aarch64-linux-android'
        run: sudo apt-get update && sudo apt-get install -y libsqlite3-dev
  
      # Set up Android NDK (Android only)
      - name: 🔧 Set up Android NDK
        if: matrix.target == 'aarch64-linux-android'
        uses: android-actions/setup-android@v2
        with:
          ndk-version: '25.1.8937393'
      
      # Set up Rust toolchain
      - name: ⚙️ Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          components: rustfmt, clippy

      # Install cross for cross-compilation
      - name: 📦 Install cross
        run: cargo install cross

      # Build for the target platform
      - name: ⚖️ Build for ${{ matrix.target }}
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: build
          target: ${{ matrix.target }}
          args: --release

      # Package the binary
      - name: 📁 Package binary
        run: |
          mkdir -p release
          BINARY_NAME=getquotes
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            BINARY_NAME=getquotes.exe
          fi
          cp target/${{ matrix.target }}/release/$BINARY_NAME release/getquotes-${{ matrix.target }}

      # Upload the artifact
      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: getquotes-${{ matrix.target }}
          path: release/getquotes-${{ matrix.target }}

  release:
    name: 🚀 Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Download all artifacts
      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Create GitHub Release
      - name: 🗿 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/getquotes-x86_64-unknown-linux-gnu
            artifacts/getquotes-x86_64-apple-darwin
            artifacts/getquotes-x86_64-pc-windows-gnu
            artifacts/getquotes-aarch64-linux-android

  publish:
    name: 📦 Publish to crates.io
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Checkout the repository
      - name: 🔍 Checkout code
        uses: actions/checkout@v3

      # Set up Rust toolchain
      - name: ⚙️ Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          components: rustfmt, clippy

      # Authenticate with crates.io
      - name: 🔑 Authenticate with crates.io
        run: echo "${{ secrets.CRATES_IO_TOKEN }}" | cargo login

      # Publish to crates.io
      - name: 🚀 Publish to crates.io
        run: cargo publish
